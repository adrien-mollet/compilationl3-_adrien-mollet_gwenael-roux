/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ASimpleVar */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce ATableauVar */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ANonVideLdvo */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AVideLdvo */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ANonVideLdv */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AVideLdv */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ANonVideLdvb */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce AVideLdvb */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AVariableDv */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce ATableauDv */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce ANonVideLdf */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce AVideLdf */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce ADf */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce AIbloc */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list, false);
            }
            break;
            case 15: /* reduce ANonVideLi */
            {
                ArrayList<Object> list = new15();
                push(goTo(9), list, false);
            }
            break;
            case 16: /* reduce AVideLi */
            {
                ArrayList<Object> list = new16();
                push(goTo(9), list, false);
            }
            break;
            case 17: /* reduce AAffectationI */
            {
                ArrayList<Object> list = new17();
                push(goTo(10), list, false);
            }
            break;
            case 18: /* reduce AConditionI */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list, false);
            }
            break;
            case 19: /* reduce AIsinonI */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list, false);
            }
            break;
            case 20: /* reduce ATantqueI */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list, false);
            }
            break;
            case 21: /* reduce AAppelI */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce ABlocI */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce ARetourI */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list, false);
            }
            break;
            case 24: /* reduce AIaff */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list, false);
            }
            break;
            case 25: /* reduce AIsi */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce AIsinon */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list, false);
            }
            break;
            case 27: /* reduce AItq */
            {
                ArrayList<Object> list = new27();
                push(goTo(14), list, false);
            }
            break;
            case 28: /* reduce ANormalIapp */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list, false);
            }
            break;
            case 29: /* reduce AEcrireIapp */
            {
                ArrayList<Object> list = new29();
                push(goTo(15), list, false);
            }
            break;
            case 30: /* reduce ANormalApp */
            {
                ArrayList<Object> list = new30();
                push(goTo(16), list, false);
            }
            break;
            case 31: /* reduce ALireApp */
            {
                ArrayList<Object> list = new31();
                push(goTo(16), list, false);
            }
            break;
            case 32: /* reduce ANonVideLexp */
            {
                ArrayList<Object> list = new32();
                push(goTo(17), list, false);
            }
            break;
            case 33: /* reduce AVideLexp */
            {
                ArrayList<Object> list = new33();
                push(goTo(17), list, false);
            }
            break;
            case 34: /* reduce ANonVideLexp2 */
            {
                ArrayList<Object> list = new34();
                push(goTo(18), list, false);
            }
            break;
            case 35: /* reduce AVideLexp2 */
            {
                ArrayList<Object> list = new35();
                push(goTo(18), list, false);
            }
            break;
            case 36: /* reduce AIret */
            {
                ArrayList<Object> list = new36();
                push(goTo(19), list, false);
            }
            break;
            case 37: /* reduce AOuExp */
            {
                ArrayList<Object> list = new37();
                push(goTo(20), list, false);
            }
            break;
            case 38: /* reduce ANivSuivantExp */
            {
                ArrayList<Object> list = new38();
                push(goTo(20), list, false);
            }
            break;
            case 39: /* reduce AEtExp1 */
            {
                ArrayList<Object> list = new39();
                push(goTo(21), list, false);
            }
            break;
            case 40: /* reduce ANivSuivantExp1 */
            {
                ArrayList<Object> list = new40();
                push(goTo(21), list, false);
            }
            break;
            case 41: /* reduce AEgalExp2 */
            {
                ArrayList<Object> list = new41();
                push(goTo(22), list, false);
            }
            break;
            case 42: /* reduce AInfExp2 */
            {
                ArrayList<Object> list = new42();
                push(goTo(22), list, false);
            }
            break;
            case 43: /* reduce ANivSuivantExp2 */
            {
                ArrayList<Object> list = new43();
                push(goTo(22), list, false);
            }
            break;
            case 44: /* reduce APlusExp3 */
            {
                ArrayList<Object> list = new44();
                push(goTo(23), list, false);
            }
            break;
            case 45: /* reduce AMoinsExp3 */
            {
                ArrayList<Object> list = new45();
                push(goTo(23), list, false);
            }
            break;
            case 46: /* reduce ANivSuivantExp3 */
            {
                ArrayList<Object> list = new46();
                push(goTo(23), list, false);
            }
            break;
            case 47: /* reduce AMultExp4 */
            {
                ArrayList<Object> list = new47();
                push(goTo(24), list, false);
            }
            break;
            case 48: /* reduce ADivExp4 */
            {
                ArrayList<Object> list = new48();
                push(goTo(24), list, false);
            }
            break;
            case 49: /* reduce ANivSuivantExp4 */
            {
                ArrayList<Object> list = new49();
                push(goTo(24), list, false);
            }
            break;
            case 50: /* reduce ANonExp5 */
            {
                ArrayList<Object> list = new50();
                push(goTo(25), list, false);
            }
            break;
            case 51: /* reduce ANivSuivantExp5 */
            {
                ArrayList<Object> list = new51();
                push(goTo(25), list, false);
            }
            break;
            case 52: /* reduce AParenthesesExp6 */
            {
                ArrayList<Object> list = new52();
                push(goTo(26), list, false);
            }
            break;
            case 53: /* reduce AAppelExp6 */
            {
                ArrayList<Object> list = new53();
                push(goTo(26), list, false);
            }
            break;
            case 54: /* reduce AVarExp6 */
            {
                ArrayList<Object> list = new54();
                push(goTo(26), list, false);
            }
            break;
            case 55: /* reduce ANombreExp6 */
            {
                ArrayList<Object> list = new55();
                push(goTo(26), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PLdvo pldvoNode2;
        PLdf pldfNode3;
        pldvoNode2 = (PLdvo)nodeArrayList1.get(0);
        pldfNode3 = (PLdf)nodeArrayList2.get(0);

        pprogrammeNode1 = new AProgramme(pldvoNode2, pldfNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ASimpleVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new ASimpleVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ATableauVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TCo tcoNode3;
        PExp pexpNode4;
        TCf tcfNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcoNode3 = (TCo)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcfNode5 = (TCf)nodeArrayList4.get(0);

        pvarNode1 = new ATableauVar(tidNode2, tcoNode3, pexpNode4, tcfNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ANonVideLdvo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvo pldvoNode1;
        {
            // Block
        PLdv pldvNode2;
        TDotcoma tdotcomaNode3;
        pldvNode2 = (PLdv)nodeArrayList1.get(0);
        tdotcomaNode3 = (TDotcoma)nodeArrayList2.get(0);

        pldvoNode1 = new ANonVideLdvo(pldvNode2, tdotcomaNode3);
        }
	nodeList.add(pldvoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AVideLdvo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvo pldvoNode1;
        {
            // Block
        TVide tvideNode2;
        tvideNode2 = (TVide)nodeArrayList1.get(0);

        pldvoNode1 = new AVideLdvo(tvideNode2);
        }
	nodeList.add(pldvoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ANonVideLdv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdv pldvNode1;
        {
            // Block
        PDv pdvNode2;
        PLdvb pldvbNode3;
        pdvNode2 = (PDv)nodeArrayList1.get(0);
        pldvbNode3 = (PLdvb)nodeArrayList2.get(0);

        pldvNode1 = new ANonVideLdv(pdvNode2, pldvbNode3);
        }
	nodeList.add(pldvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AVideLdv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdv pldvNode1;
        {
            // Block
        TVide tvideNode2;
        tvideNode2 = (TVide)nodeArrayList1.get(0);

        pldvNode1 = new AVideLdv(tvideNode2);
        }
	nodeList.add(pldvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ANonVideLdvb */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvb pldvbNode1;
        {
            // Block
        TComa tcomaNode2;
        PDv pdvNode3;
        PLdvb pldvbNode4;
        tcomaNode2 = (TComa)nodeArrayList1.get(0);
        pdvNode3 = (PDv)nodeArrayList2.get(0);
        pldvbNode4 = (PLdvb)nodeArrayList3.get(0);

        pldvbNode1 = new ANonVideLdvb(tcomaNode2, pdvNode3, pldvbNode4);
        }
	nodeList.add(pldvbNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AVideLdvb */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvb pldvbNode1;
        {
            // Block
        TVide tvideNode2;
        tvideNode2 = (TVide)nodeArrayList1.get(0);

        pldvbNode1 = new AVideLdvb(tvideNode2);
        }
	nodeList.add(pldvbNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVariableDv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDv pdvNode1;
        {
            // Block
        TEntier tentierNode2;
        TId tidNode3;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pdvNode1 = new AVariableDv(tentierNode2, tidNode3);
        }
	nodeList.add(pdvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ATableauDv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDv pdvNode1;
        {
            // Block
        TEntier tentierNode2;
        TId tidNode3;
        TCo tcoNode4;
        TNombre tnombreNode5;
        TCf tcfNode6;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        tnombreNode5 = (TNombre)nodeArrayList4.get(0);
        tcfNode6 = (TCf)nodeArrayList5.get(0);

        pdvNode1 = new ATableauDv(tentierNode2, tidNode3, tcoNode4, tnombreNode5, tcfNode6);
        }
	nodeList.add(pdvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ANonVideLdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdf pldfNode1;
        {
            // Block
        PDf pdfNode2;
        PLdf pldfNode3;
        pdfNode2 = (PDf)nodeArrayList1.get(0);
        pldfNode3 = (PLdf)nodeArrayList2.get(0);

        pldfNode1 = new ANonVideLdf(pdfNode2, pldfNode3);
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AVideLdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdf pldfNode1;
        {
            // Block
        TVide tvideNode2;
        tvideNode2 = (TVide)nodeArrayList1.get(0);

        pldfNode1 = new AVideLdf(tvideNode2);
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ADf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        TId tidNode2;
        TPo tpoNode3;
        PLdv pldvNode4;
        TPf tpfNode5;
        PLdvo pldvoNode6;
        PIbloc piblocNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        pldvNode4 = (PLdv)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);
        pldvoNode6 = (PLdvo)nodeArrayList5.get(0);
        piblocNode7 = (PIbloc)nodeArrayList6.get(0);

        pdfNode1 = new ADf(tidNode2, tpoNode3, pldvNode4, tpfNode5, pldvoNode6, piblocNode7);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AIbloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIbloc piblocNode1;
        {
            // Block
        TAo taoNode2;
        PLi pliNode3;
        TAf tafNode4;
        taoNode2 = (TAo)nodeArrayList1.get(0);
        pliNode3 = (PLi)nodeArrayList2.get(0);
        tafNode4 = (TAf)nodeArrayList3.get(0);

        piblocNode1 = new AIbloc(taoNode2, pliNode3, tafNode4);
        }
	nodeList.add(piblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANonVideLi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLi pliNode1;
        {
            // Block
        PI piNode2;
        PLi pliNode3;
        piNode2 = (PI)nodeArrayList1.get(0);
        pliNode3 = (PLi)nodeArrayList2.get(0);

        pliNode1 = new ANonVideLi(piNode2, pliNode3);
        }
	nodeList.add(pliNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVideLi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLi pliNode1;
        {
            // Block
        TVide tvideNode2;
        tvideNode2 = (TVide)nodeArrayList1.get(0);

        pliNode1 = new AVideLi(tvideNode2);
        }
	nodeList.add(pliNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAffectationI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIaff piaffNode2;
        piaffNode2 = (PIaff)nodeArrayList1.get(0);

        piNode1 = new AAffectationI(piaffNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AConditionI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIsi pisiNode2;
        pisiNode2 = (PIsi)nodeArrayList1.get(0);

        piNode1 = new AConditionI(pisiNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AIsinonI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIsinon pisinonNode2;
        pisinonNode2 = (PIsinon)nodeArrayList1.get(0);

        piNode1 = new AIsinonI(pisinonNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ATantqueI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PItq pitqNode2;
        pitqNode2 = (PItq)nodeArrayList1.get(0);

        piNode1 = new ATantqueI(pitqNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAppelI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIapp piappNode2;
        piappNode2 = (PIapp)nodeArrayList1.get(0);

        piNode1 = new AAppelI(piappNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ABlocI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIbloc piblocNode2;
        piblocNode2 = (PIbloc)nodeArrayList1.get(0);

        piNode1 = new ABlocI(piblocNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ARetourI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIret piretNode2;
        piretNode2 = (PIret)nodeArrayList1.get(0);

        piNode1 = new ARetourI(piretNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AIaff */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIaff piaffNode1;
        {
            // Block
        PVar pvarNode2;
        TEgal tegalNode3;
        PExp pexpNode4;
        TDotcoma tdotcomaNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tdotcomaNode5 = (TDotcoma)nodeArrayList4.get(0);

        piaffNode1 = new AIaff(pvarNode2, tegalNode3, pexpNode4, tdotcomaNode5);
        }
	nodeList.add(piaffNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AIsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIsi pisiNode1;
        {
            // Block
        TSi tsiNode2;
        PExp pexpNode3;
        TAlors talorsNode4;
        PIbloc piblocNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        piblocNode5 = (PIbloc)nodeArrayList4.get(0);

        pisiNode1 = new AIsi(tsiNode2, pexpNode3, talorsNode4, piblocNode5);
        }
	nodeList.add(pisiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AIsinon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIsinon pisinonNode1;
        {
            // Block
        PIsi pisiNode2;
        TSinon tsinonNode3;
        PIbloc piblocNode4;
        pisiNode2 = (PIsi)nodeArrayList1.get(0);
        tsinonNode3 = (TSinon)nodeArrayList2.get(0);
        piblocNode4 = (PIbloc)nodeArrayList3.get(0);

        pisinonNode1 = new AIsinon(pisiNode2, tsinonNode3, piblocNode4);
        }
	nodeList.add(pisinonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AItq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItq pitqNode1;
        {
            // Block
        TTantque ttantqueNode2;
        PExp pexpNode3;
        TFaire tfaireNode4;
        PIbloc piblocNode5;
        ttantqueNode2 = (TTantque)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        piblocNode5 = (PIbloc)nodeArrayList4.get(0);

        pitqNode1 = new AItq(ttantqueNode2, pexpNode3, tfaireNode4, piblocNode5);
        }
	nodeList.add(pitqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANormalIapp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIapp piappNode1;
        {
            // Block
        PApp pappNode2;
        TDotcoma tdotcomaNode3;
        pappNode2 = (PApp)nodeArrayList1.get(0);
        tdotcomaNode3 = (TDotcoma)nodeArrayList2.get(0);

        piappNode1 = new ANormalIapp(pappNode2, tdotcomaNode3);
        }
	nodeList.add(piappNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AEcrireIapp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIapp piappNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TPo tpoNode3;
        PExp pexpNode4;
        TPf tpfNode5;
        TDotcoma tdotcomaNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);
        tdotcomaNode6 = (TDotcoma)nodeArrayList5.get(0);

        piappNode1 = new AEcrireIapp(tecrireNode2, tpoNode3, pexpNode4, tpfNode5, tdotcomaNode6);
        }
	nodeList.add(piappNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ANormalApp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PApp pappNode1;
        {
            // Block
        TId tidNode2;
        TPo tpoNode3;
        PLexp plexpNode4;
        TPf tpfNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        plexpNode4 = (PLexp)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);

        pappNode1 = new ANormalApp(tidNode2, tpoNode3, plexpNode4, tpfNode5);
        }
	nodeList.add(pappNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ALireApp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PApp pappNode1;
        {
            // Block
        TLire tlireNode2;
        TPo tpoNode3;
        TPf tpfNode4;
        tlireNode2 = (TLire)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        tpfNode4 = (TPf)nodeArrayList3.get(0);

        pappNode1 = new ALireApp(tlireNode2, tpoNode3, tpfNode4);
        }
	nodeList.add(pappNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ANonVideLexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLexp plexpNode1;
        {
            // Block
        PExp pexpNode2;
        PLexp2 plexp2Node3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        plexp2Node3 = (PLexp2)nodeArrayList2.get(0);

        plexpNode1 = new ANonVideLexp(pexpNode2, plexp2Node3);
        }
	nodeList.add(plexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AVideLexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLexp plexpNode1;
        {
            // Block
        TVide tvideNode2;
        tvideNode2 = (TVide)nodeArrayList1.get(0);

        plexpNode1 = new AVideLexp(tvideNode2);
        }
	nodeList.add(plexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ANonVideLexp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLexp2 plexp2Node1;
        {
            // Block
        TComa tcomaNode2;
        PExp pexpNode3;
        PLexp2 plexp2Node4;
        tcomaNode2 = (TComa)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        plexp2Node4 = (PLexp2)nodeArrayList3.get(0);

        plexp2Node1 = new ANonVideLexp2(tcomaNode2, pexpNode3, plexp2Node4);
        }
	nodeList.add(plexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AVideLexp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLexp2 plexp2Node1;
        {
            // Block
        TVide tvideNode2;
        tvideNode2 = (TVide)nodeArrayList1.get(0);

        plexp2Node1 = new AVideLexp2(tvideNode2);
        }
	nodeList.add(plexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AIret */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIret piretNode1;
        {
            // Block
        TRetour tretourNode2;
        PExp pexpNode3;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        piretNode1 = new AIret(tretourNode2, pexpNode3);
        }
	nodeList.add(piretNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AOuExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TOu touNode3;
        PExp1 pexp1Node4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);

        pexpNode1 = new AOuExp(pexpNode2, touNode3, pexp1Node4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ANivSuivantExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp1 pexp1Node2;
        pexp1Node2 = (PExp1)nodeArrayList1.get(0);

        pexpNode1 = new ANivSuivantExp(pexp1Node2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AEtExp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp1 pexp1Node2;
        TEt tetNode3;
        PExp2 pexp2Node4;
        pexp1Node2 = (PExp1)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pexp2Node4 = (PExp2)nodeArrayList3.get(0);

        pexp1Node1 = new AEtExp1(pexp1Node2, tetNode3, pexp2Node4);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ANivSuivantExp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp2 pexp2Node2;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);

        pexp1Node1 = new ANivSuivantExp1(pexp2Node2);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AEgalExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp2 pexp2Node2;
        TEgal tegalNode3;
        PExp3 pexp3Node4;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp2Node1 = new AEgalExp2(pexp2Node2, tegalNode3, pexp3Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AInfExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp2 pexp2Node2;
        TInf tinfNode3;
        PExp3 pexp3Node4;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp2Node1 = new AInfExp2(pexp2Node2, tinfNode3, pexp3Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ANivSuivantExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp3 pexp3Node2;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);

        pexp2Node1 = new ANivSuivantExp2(pexp3Node2);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce APlusExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp3 pexp3Node2;
        TPlus tplusNode3;
        PExp4 pexp4Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexp4Node4 = (PExp4)nodeArrayList3.get(0);

        pexp3Node1 = new APlusExp3(pexp3Node2, tplusNode3, pexp4Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AMoinsExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp3 pexp3Node2;
        TMoins tmoinsNode3;
        PExp4 pexp4Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        tmoinsNode3 = (TMoins)nodeArrayList2.get(0);
        pexp4Node4 = (PExp4)nodeArrayList3.get(0);

        pexp3Node1 = new AMoinsExp3(pexp3Node2, tmoinsNode3, pexp4Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ANivSuivantExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp4 pexp4Node2;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);

        pexp3Node1 = new ANivSuivantExp3(pexp4Node2);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMultExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp4 pexp4Node2;
        TMult tmultNode3;
        PExp5 pexp5Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexp5Node4 = (PExp5)nodeArrayList3.get(0);

        pexp4Node1 = new AMultExp4(pexp4Node2, tmultNode3, pexp5Node4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ADivExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp4 pexp4Node2;
        TDiv tdivNode3;
        PExp5 pexp5Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexp5Node4 = (PExp5)nodeArrayList3.get(0);

        pexp4Node1 = new ADivExp4(pexp4Node2, tdivNode3, pexp5Node4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ANivSuivantExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp5 pexp5Node2;
        pexp5Node2 = (PExp5)nodeArrayList1.get(0);

        pexp4Node1 = new ANivSuivantExp4(pexp5Node2);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ANonExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        TNon tnonNode2;
        PExp5 pexp5Node3;
        tnonNode2 = (TNon)nodeArrayList1.get(0);
        pexp5Node3 = (PExp5)nodeArrayList2.get(0);

        pexp5Node1 = new ANonExp5(tnonNode2, pexp5Node3);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ANivSuivantExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        PExp6 pexp6Node2;
        pexp6Node2 = (PExp6)nodeArrayList1.get(0);

        pexp5Node1 = new ANivSuivantExp5(pexp6Node2);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AParenthesesExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        TPo tpoNode2;
        PExp pexpNode3;
        TPf tpfNode4;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tpfNode4 = (TPf)nodeArrayList3.get(0);

        pexp6Node1 = new AParenthesesExp6(tpoNode2, pexpNode3, tpfNode4);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAppelExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        PApp pappNode2;
        pappNode2 = (PApp)nodeArrayList1.get(0);

        pexp6Node1 = new AAppelExp6(pappNode2);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AVarExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexp6Node1 = new AVarExp6(pvarNode2);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ANombreExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pexp6Node1 = new ANombreExp6(tnombreNode2);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {19, SHIFT, 2}, },
			{{-1, REDUCE, 4}, {3, REDUCE, 6}, },
			{{-1, ERROR, 2}, {2, SHIFT, 7}, },
			{{-1, ERROR, 3}, {29, ACCEPT, -1}, },
			{{-1, ERROR, 4}, {0, SHIFT, 8}, {2, SHIFT, 9}, },
			{{-1, ERROR, 5}, {3, SHIFT, 12}, },
			{{-1, ERROR, 6}, {0, SHIFT, 13}, {4, SHIFT, 14}, },
			{{-1, REDUCE, 9}, {13, SHIFT, 16}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 9}, {11, SHIFT, 17}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 11}, {0, SHIFT, 8}, {2, SHIFT, 9}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 14}, {19, SHIFT, 2}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 16}, {1, SHIFT, 20}, },
			{{-1, ERROR, 17}, {0, SHIFT, 21}, {19, SHIFT, 2}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 19}, {0, SHIFT, 13}, {4, SHIFT, 14}, },
			{{-1, ERROR, 20}, {14, SHIFT, 24}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 22}, {12, SHIFT, 25}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 25}, {0, SHIFT, 1}, {19, SHIFT, 2}, },
			{{-1, ERROR, 26}, {15, SHIFT, 27}, },
			{{-1, ERROR, 27}, {0, SHIFT, 29}, {2, SHIFT, 30}, {15, SHIFT, 27}, {17, SHIFT, 31}, {21, SHIFT, 32}, {23, SHIFT, 33}, {27, SHIFT, 34}, {28, SHIFT, 35}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 1}, {11, SHIFT, 47}, {13, SHIFT, 48}, },
			{{-1, ERROR, 31}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 32}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 33}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 34}, {11, SHIFT, 63}, },
			{{-1, ERROR, 35}, {11, SHIFT, 64}, },
			{{-1, ERROR, 36}, {5, SHIFT, 65}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 38}, {16, SHIFT, 66}, },
			{{-1, ERROR, 39}, {0, SHIFT, 29}, {2, SHIFT, 30}, {15, SHIFT, 27}, {17, SHIFT, 31}, {21, SHIFT, 32}, {23, SHIFT, 33}, {27, SHIFT, 34}, {28, SHIFT, 35}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, {20, SHIFT, 68}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 45}, {3, SHIFT, 69}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 47}, {0, SHIFT, 70}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 48}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 50}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 51}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 54}, {18, SHIFT, 76}, {25, SHIFT, 77}, },
			{{-1, REDUCE, 38}, {24, SHIFT, 78}, },
			{{-1, REDUCE, 40}, {5, SHIFT, 79}, {6, SHIFT, 80}, },
			{{-1, REDUCE, 43}, {7, SHIFT, 81}, {8, SHIFT, 82}, },
			{{-1, REDUCE, 46}, {9, SHIFT, 83}, {10, SHIFT, 84}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 61}, {22, SHIFT, 85}, {25, SHIFT, 77}, },
			{{-1, REDUCE, 36}, {25, SHIFT, 77}, },
			{{-1, ERROR, 63}, {12, SHIFT, 86}, },
			{{-1, ERROR, 64}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 65}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 68}, {15, SHIFT, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 71}, {12, SHIFT, 90}, },
			{{-1, ERROR, 72}, {0, SHIFT, 91}, {4, SHIFT, 92}, {25, SHIFT, 77}, },
			{{-1, ERROR, 73}, {14, SHIFT, 94}, {25, SHIFT, 77}, },
			{{-1, ERROR, 74}, {12, SHIFT, 95}, {25, SHIFT, 77}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 76}, {15, SHIFT, 27}, },
			{{-1, ERROR, 77}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 78}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 79}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 80}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 81}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 82}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 83}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 84}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, ERROR, 85}, {15, SHIFT, 27}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 87}, {12, SHIFT, 106}, {25, SHIFT, 77}, },
			{{-1, ERROR, 88}, {3, SHIFT, 107}, {25, SHIFT, 77}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 92}, {1, SHIFT, 49}, {2, SHIFT, 30}, {11, SHIFT, 50}, {26, SHIFT, 51}, {27, SHIFT, 34}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 37}, {24, SHIFT, 78}, },
			{{-1, REDUCE, 39}, {5, SHIFT, 79}, {6, SHIFT, 80}, },
			{{-1, REDUCE, 41}, {7, SHIFT, 81}, {8, SHIFT, 82}, },
			{{-1, REDUCE, 42}, {7, SHIFT, 81}, {8, SHIFT, 82}, },
			{{-1, REDUCE, 44}, {9, SHIFT, 83}, {10, SHIFT, 84}, },
			{{-1, REDUCE, 45}, {9, SHIFT, 83}, {10, SHIFT, 84}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 106}, {3, SHIFT, 109}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 108}, {0, SHIFT, 91}, {4, SHIFT, 92}, {25, SHIFT, 77}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 34}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 52}, {27, 36}, {39, 36}, },
			{{-1, 4}, {25, 26}, },
			{{-1, 5}, {17, 22}, },
			{{-1, 15}, {19, 23}, },
			{{-1, 6}, {14, 19}, },
			{{-1, 10}, {11, 18}, },
			{{-1, 11}, },
			{{-1, 37}, {26, 28}, {68, 89}, {76, 96}, {85, 105}, },
			{{-1, 38}, {39, 67}, },
			{{-1, 39}, },
			{{-1, 40}, },
			{{-1, 41}, },
			{{-1, 42}, },
			{{-1, 43}, },
			{{-1, 44}, },
			{{-1, 53}, {27, 45}, {39, 45}, },
			{{-1, 71}, },
			{{-1, 93}, {108, 110}, },
			{{-1, 46}, },
			{{-1, 54}, {32, 61}, {33, 62}, {47, 72}, {48, 73}, {50, 74}, {64, 87}, {65, 88}, {92, 108}, },
			{{-1, 55}, {77, 97}, },
			{{-1, 56}, {78, 98}, },
			{{-1, 57}, {79, 99}, {80, 100}, },
			{{-1, 58}, {81, 101}, {82, 102}, },
			{{-1, 59}, {51, 75}, {83, 103}, {84, 104}, },
			{{-1, 60}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: ' ', 'entier'",
			"expecting: ' ', id, ';', '{'",
			"expecting: id",
			"expecting: EOF",
			"expecting: ' ', id",
			"expecting: ';'",
			"expecting: ' ', ','",
			"expecting: ' ', ',', '['",
			"expecting: '('",
			"expecting: ' ', id, '{'",
			"expecting: ';', ')'",
			"expecting: 'entier'",
			"expecting: nombre",
			"expecting: ']'",
			"expecting: ')'",
			"expecting: '{'",
			"expecting: ' ', id, '{', 'si ', 'tantque ', 'retour ', 'lire', 'ecrire'",
			"expecting: '}'",
			"expecting: ' ', id, ';', ',', '=', '<', '+', '-', '*', '/', '(', ')', '[', ']', '{', 'si ', 'alors ', 'tantque ', 'faire ', 'retour ', '&', '|', 'lire', 'ecrire'",
			"expecting: nombre, id, '(', '!', 'lire'",
			"expecting: '='",
			"expecting: ' ', id, '{', 'si ', 'sinon ', 'tantque ', 'retour ', 'lire', 'ecrire'",
			"expecting: ' ', nombre, id, '(', '!', 'lire'",
			"expecting: ' ', id, ';', ',', '=', '<', '+', '-', '*', '/', ')', ']', '{', 'si ', 'alors ', 'tantque ', 'faire ', 'retour ', '&', '|', 'lire', 'ecrire'",
			"expecting: 'alors ', '|'",
			"expecting: ' ', id, ';', ',', ')', ']', '{', 'si ', 'alors ', 'tantque ', 'faire ', 'retour ', '&', '|', 'lire', 'ecrire'",
			"expecting: ' ', id, ';', ',', '=', '<', ')', ']', '{', 'si ', 'alors ', 'tantque ', 'faire ', 'retour ', '&', '|', 'lire', 'ecrire'",
			"expecting: ' ', id, ';', ',', '=', '<', '+', '-', ')', ']', '{', 'si ', 'alors ', 'tantque ', 'faire ', 'retour ', '&', '|', 'lire', 'ecrire'",
			"expecting: 'faire ', '|'",
			"expecting: ' ', id, '{', 'si ', 'tantque ', 'retour ', '|', 'lire', 'ecrire'",
			"expecting: ' ', ',', '|'",
			"expecting: ']', '|'",
			"expecting: ')', '|'",
			"expecting: ';', '|'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 3, 8, 3, 4, 9, 10, 11, 10, 12, 0, 3, 6, 13, 14, 14, 10, 6, 0, 15, 16, 4, 17, 18, 19, 19, 19, 8, 8, 20, 16, 17, 16, 16, 21, 16, 16, 16, 5, 16, 22, 19, 23, 19, 19, 23, 23, 24, 25, 26, 27, 23, 23, 23, 28, 29, 14, 19, 19, 21, 17, 15, 16, 14, 14, 30, 31, 32, 23, 15, 19, 19, 19, 19, 19, 19, 19, 19, 15, 23, 32, 33, 16, 23, 14, 19, 14, 23, 23, 21, 25, 26, 27, 27, 23, 23, 23, 23, 16, 5, 16, 30, 16, 14, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
