/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import java.util.*;
import sc.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgramme().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramme(AProgramme node)
    {
        defaultIn(node);
    }

    public void outAProgramme(AProgramme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        inAProgramme(node);
        if(node.getLdvo() != null)
        {
            node.getLdvo().apply(this);
        }
        if(node.getLdf() != null)
        {
            node.getLdf().apply(this);
        }
        outAProgramme(node);
    }

    public void inASimpleVar(ASimpleVar node)
    {
        defaultIn(node);
    }

    public void outASimpleVar(ASimpleVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleVar(ASimpleVar node)
    {
        inASimpleVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outASimpleVar(node);
    }

    public void inATableauVar(ATableauVar node)
    {
        defaultIn(node);
    }

    public void outATableauVar(ATableauVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATableauVar(ATableauVar node)
    {
        inATableauVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getCf() != null)
        {
            node.getCf().apply(this);
        }
        outATableauVar(node);
    }

    public void inANonVideLdvo(ANonVideLdvo node)
    {
        defaultIn(node);
    }

    public void outANonVideLdvo(ANonVideLdvo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonVideLdvo(ANonVideLdvo node)
    {
        inANonVideLdvo(node);
        if(node.getLdv() != null)
        {
            node.getLdv().apply(this);
        }
        if(node.getDotcoma() != null)
        {
            node.getDotcoma().apply(this);
        }
        outANonVideLdvo(node);
    }

    public void inAVideLdvo(AVideLdvo node)
    {
        defaultIn(node);
    }

    public void outAVideLdvo(AVideLdvo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideLdvo(AVideLdvo node)
    {
        inAVideLdvo(node);
        outAVideLdvo(node);
    }

    public void inANonVideLdv(ANonVideLdv node)
    {
        defaultIn(node);
    }

    public void outANonVideLdv(ANonVideLdv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonVideLdv(ANonVideLdv node)
    {
        inANonVideLdv(node);
        if(node.getDv() != null)
        {
            node.getDv().apply(this);
        }
        if(node.getLdvb() != null)
        {
            node.getLdvb().apply(this);
        }
        outANonVideLdv(node);
    }

    public void inAVideLdv(AVideLdv node)
    {
        defaultIn(node);
    }

    public void outAVideLdv(AVideLdv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideLdv(AVideLdv node)
    {
        inAVideLdv(node);
        outAVideLdv(node);
    }

    public void inANonVideLdvb(ANonVideLdvb node)
    {
        defaultIn(node);
    }

    public void outANonVideLdvb(ANonVideLdvb node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonVideLdvb(ANonVideLdvb node)
    {
        inANonVideLdvb(node);
        if(node.getComa() != null)
        {
            node.getComa().apply(this);
        }
        if(node.getDv() != null)
        {
            node.getDv().apply(this);
        }
        if(node.getLdvb() != null)
        {
            node.getLdvb().apply(this);
        }
        outANonVideLdvb(node);
    }

    public void inAVideLdvb(AVideLdvb node)
    {
        defaultIn(node);
    }

    public void outAVideLdvb(AVideLdvb node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideLdvb(AVideLdvb node)
    {
        inAVideLdvb(node);
        outAVideLdvb(node);
    }

    public void inAVariableDv(AVariableDv node)
    {
        defaultIn(node);
    }

    public void outAVariableDv(AVariableDv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDv(AVariableDv node)
    {
        inAVariableDv(node);
        if(node.getEntier() != null)
        {
            node.getEntier().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVariableDv(node);
    }

    public void inATableauDv(ATableauDv node)
    {
        defaultIn(node);
    }

    public void outATableauDv(ATableauDv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATableauDv(ATableauDv node)
    {
        inATableauDv(node);
        if(node.getEntier() != null)
        {
            node.getEntier().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        if(node.getCf() != null)
        {
            node.getCf().apply(this);
        }
        outATableauDv(node);
    }

    public void inANonVideLdf(ANonVideLdf node)
    {
        defaultIn(node);
    }

    public void outANonVideLdf(ANonVideLdf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonVideLdf(ANonVideLdf node)
    {
        inANonVideLdf(node);
        if(node.getDf() != null)
        {
            node.getDf().apply(this);
        }
        if(node.getLdf() != null)
        {
            node.getLdf().apply(this);
        }
        outANonVideLdf(node);
    }

    public void inAVideLdf(AVideLdf node)
    {
        defaultIn(node);
    }

    public void outAVideLdf(AVideLdf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideLdf(AVideLdf node)
    {
        inAVideLdf(node);
        outAVideLdf(node);
    }

    public void inADf(ADf node)
    {
        defaultIn(node);
    }

    public void outADf(ADf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADf(ADf node)
    {
        inADf(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getLdv() != null)
        {
            node.getLdv().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        if(node.getLdvo() != null)
        {
            node.getLdvo().apply(this);
        }
        if(node.getIbloc() != null)
        {
            node.getIbloc().apply(this);
        }
        outADf(node);
    }

    public void inAIbloc(AIbloc node)
    {
        defaultIn(node);
    }

    public void outAIbloc(AIbloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIbloc(AIbloc node)
    {
        inAIbloc(node);
        if(node.getAo() != null)
        {
            node.getAo().apply(this);
        }
        if(node.getLi() != null)
        {
            node.getLi().apply(this);
        }
        if(node.getAf() != null)
        {
            node.getAf().apply(this);
        }
        outAIbloc(node);
    }

    public void inANonVideLi(ANonVideLi node)
    {
        defaultIn(node);
    }

    public void outANonVideLi(ANonVideLi node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonVideLi(ANonVideLi node)
    {
        inANonVideLi(node);
        if(node.getI() != null)
        {
            node.getI().apply(this);
        }
        if(node.getLi() != null)
        {
            node.getLi().apply(this);
        }
        outANonVideLi(node);
    }

    public void inAVideLi(AVideLi node)
    {
        defaultIn(node);
    }

    public void outAVideLi(AVideLi node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideLi(AVideLi node)
    {
        inAVideLi(node);
        outAVideLi(node);
    }

    public void inAAffectationI(AAffectationI node)
    {
        defaultIn(node);
    }

    public void outAAffectationI(AAffectationI node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffectationI(AAffectationI node)
    {
        inAAffectationI(node);
        if(node.getIaff() != null)
        {
            node.getIaff().apply(this);
        }
        outAAffectationI(node);
    }

    public void inAConditionI(AConditionI node)
    {
        defaultIn(node);
    }

    public void outAConditionI(AConditionI node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionI(AConditionI node)
    {
        inAConditionI(node);
        if(node.getIsi() != null)
        {
            node.getIsi().apply(this);
        }
        outAConditionI(node);
    }

    public void inAIsinonI(AIsinonI node)
    {
        defaultIn(node);
    }

    public void outAIsinonI(AIsinonI node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIsinonI(AIsinonI node)
    {
        inAIsinonI(node);
        if(node.getIsinon() != null)
        {
            node.getIsinon().apply(this);
        }
        outAIsinonI(node);
    }

    public void inATantqueI(ATantqueI node)
    {
        defaultIn(node);
    }

    public void outATantqueI(ATantqueI node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATantqueI(ATantqueI node)
    {
        inATantqueI(node);
        if(node.getItq() != null)
        {
            node.getItq().apply(this);
        }
        outATantqueI(node);
    }

    public void inAAppelI(AAppelI node)
    {
        defaultIn(node);
    }

    public void outAAppelI(AAppelI node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppelI(AAppelI node)
    {
        inAAppelI(node);
        if(node.getIapp() != null)
        {
            node.getIapp().apply(this);
        }
        outAAppelI(node);
    }

    public void inABlocI(ABlocI node)
    {
        defaultIn(node);
    }

    public void outABlocI(ABlocI node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocI(ABlocI node)
    {
        inABlocI(node);
        if(node.getIbloc() != null)
        {
            node.getIbloc().apply(this);
        }
        outABlocI(node);
    }

    public void inARetourI(ARetourI node)
    {
        defaultIn(node);
    }

    public void outARetourI(ARetourI node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetourI(ARetourI node)
    {
        inARetourI(node);
        if(node.getIret() != null)
        {
            node.getIret().apply(this);
        }
        outARetourI(node);
    }

    public void inAIaff(AIaff node)
    {
        defaultIn(node);
    }

    public void outAIaff(AIaff node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIaff(AIaff node)
    {
        inAIaff(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getEgal() != null)
        {
            node.getEgal().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDotcoma() != null)
        {
            node.getDotcoma().apply(this);
        }
        outAIaff(node);
    }

    public void inAIsi(AIsi node)
    {
        defaultIn(node);
    }

    public void outAIsi(AIsi node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIsi(AIsi node)
    {
        inAIsi(node);
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        if(node.getIbloc() != null)
        {
            node.getIbloc().apply(this);
        }
        outAIsi(node);
    }

    public void inAIsinon(AIsinon node)
    {
        defaultIn(node);
    }

    public void outAIsinon(AIsinon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIsinon(AIsinon node)
    {
        inAIsinon(node);
        if(node.getIsi() != null)
        {
            node.getIsi().apply(this);
        }
        if(node.getSinon() != null)
        {
            node.getSinon().apply(this);
        }
        if(node.getIbloc() != null)
        {
            node.getIbloc().apply(this);
        }
        outAIsinon(node);
    }

    public void inAItq(AItq node)
    {
        defaultIn(node);
    }

    public void outAItq(AItq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAItq(AItq node)
    {
        inAItq(node);
        if(node.getTantque() != null)
        {
            node.getTantque().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFaire() != null)
        {
            node.getFaire().apply(this);
        }
        if(node.getIbloc() != null)
        {
            node.getIbloc().apply(this);
        }
        outAItq(node);
    }

    public void inANormalIapp(ANormalIapp node)
    {
        defaultIn(node);
    }

    public void outANormalIapp(ANormalIapp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalIapp(ANormalIapp node)
    {
        inANormalIapp(node);
        if(node.getApp() != null)
        {
            node.getApp().apply(this);
        }
        if(node.getDotcoma() != null)
        {
            node.getDotcoma().apply(this);
        }
        outANormalIapp(node);
    }

    public void inAEcrireIapp(AEcrireIapp node)
    {
        defaultIn(node);
    }

    public void outAEcrireIapp(AEcrireIapp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEcrireIapp(AEcrireIapp node)
    {
        inAEcrireIapp(node);
        if(node.getEcrire() != null)
        {
            node.getEcrire().apply(this);
        }
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        if(node.getDotcoma() != null)
        {
            node.getDotcoma().apply(this);
        }
        outAEcrireIapp(node);
    }

    public void inANormalApp(ANormalApp node)
    {
        defaultIn(node);
    }

    public void outANormalApp(ANormalApp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalApp(ANormalApp node)
    {
        inANormalApp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getLexp() != null)
        {
            node.getLexp().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outANormalApp(node);
    }

    public void inALireApp(ALireApp node)
    {
        defaultIn(node);
    }

    public void outALireApp(ALireApp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALireApp(ALireApp node)
    {
        inALireApp(node);
        if(node.getLire() != null)
        {
            node.getLire().apply(this);
        }
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outALireApp(node);
    }

    public void inANonVideLexp(ANonVideLexp node)
    {
        defaultIn(node);
    }

    public void outANonVideLexp(ANonVideLexp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonVideLexp(ANonVideLexp node)
    {
        inANonVideLexp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLexp2() != null)
        {
            node.getLexp2().apply(this);
        }
        outANonVideLexp(node);
    }

    public void inAVideLexp(AVideLexp node)
    {
        defaultIn(node);
    }

    public void outAVideLexp(AVideLexp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideLexp(AVideLexp node)
    {
        inAVideLexp(node);
        outAVideLexp(node);
    }

    public void inANonVideLexp2(ANonVideLexp2 node)
    {
        defaultIn(node);
    }

    public void outANonVideLexp2(ANonVideLexp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonVideLexp2(ANonVideLexp2 node)
    {
        inANonVideLexp2(node);
        if(node.getComa() != null)
        {
            node.getComa().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLexp2() != null)
        {
            node.getLexp2().apply(this);
        }
        outANonVideLexp2(node);
    }

    public void inAVideLexp2(AVideLexp2 node)
    {
        defaultIn(node);
    }

    public void outAVideLexp2(AVideLexp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideLexp2(AVideLexp2 node)
    {
        inAVideLexp2(node);
        outAVideLexp2(node);
    }

    public void inAIret(AIret node)
    {
        defaultIn(node);
    }

    public void outAIret(AIret node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIret(AIret node)
    {
        inAIret(node);
        if(node.getRetour() != null)
        {
            node.getRetour().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIret(node);
    }

    public void inAOuExp(AOuExp node)
    {
        defaultIn(node);
    }

    public void outAOuExp(AOuExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExp(AOuExp node)
    {
        inAOuExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAOuExp(node);
    }

    public void inANivSuivantExp(ANivSuivantExp node)
    {
        defaultIn(node);
    }

    public void outANivSuivantExp(ANivSuivantExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivSuivantExp(ANivSuivantExp node)
    {
        inANivSuivantExp(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outANivSuivantExp(node);
    }

    public void inAEtExp1(AEtExp1 node)
    {
        defaultIn(node);
    }

    public void outAEtExp1(AEtExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtExp1(AEtExp1 node)
    {
        inAEtExp1(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getEt() != null)
        {
            node.getEt().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAEtExp1(node);
    }

    public void inANivSuivantExp1(ANivSuivantExp1 node)
    {
        defaultIn(node);
    }

    public void outANivSuivantExp1(ANivSuivantExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivSuivantExp1(ANivSuivantExp1 node)
    {
        inANivSuivantExp1(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outANivSuivantExp1(node);
    }

    public void inAEgalExp2(AEgalExp2 node)
    {
        defaultIn(node);
    }

    public void outAEgalExp2(AEgalExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEgalExp2(AEgalExp2 node)
    {
        inAEgalExp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getEgal() != null)
        {
            node.getEgal().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAEgalExp2(node);
    }

    public void inAInfExp2(AInfExp2 node)
    {
        defaultIn(node);
    }

    public void outAInfExp2(AInfExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInfExp2(AInfExp2 node)
    {
        inAInfExp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getInf() != null)
        {
            node.getInf().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAInfExp2(node);
    }

    public void inANivSuivantExp2(ANivSuivantExp2 node)
    {
        defaultIn(node);
    }

    public void outANivSuivantExp2(ANivSuivantExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivSuivantExp2(ANivSuivantExp2 node)
    {
        inANivSuivantExp2(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outANivSuivantExp2(node);
    }

    public void inAPlusExp3(APlusExp3 node)
    {
        defaultIn(node);
    }

    public void outAPlusExp3(APlusExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp3(APlusExp3 node)
    {
        inAPlusExp3(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAPlusExp3(node);
    }

    public void inAMoinsExp3(AMoinsExp3 node)
    {
        defaultIn(node);
    }

    public void outAMoinsExp3(AMoinsExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoinsExp3(AMoinsExp3 node)
    {
        inAMoinsExp3(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        if(node.getMoins() != null)
        {
            node.getMoins().apply(this);
        }
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAMoinsExp3(node);
    }

    public void inANivSuivantExp3(ANivSuivantExp3 node)
    {
        defaultIn(node);
    }

    public void outANivSuivantExp3(ANivSuivantExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivSuivantExp3(ANivSuivantExp3 node)
    {
        inANivSuivantExp3(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outANivSuivantExp3(node);
    }

    public void inAMultExp4(AMultExp4 node)
    {
        defaultIn(node);
    }

    public void outAMultExp4(AMultExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp4(AMultExp4 node)
    {
        inAMultExp4(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAMultExp4(node);
    }

    public void inADivExp4(ADivExp4 node)
    {
        defaultIn(node);
    }

    public void outADivExp4(ADivExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp4(ADivExp4 node)
    {
        inADivExp4(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outADivExp4(node);
    }

    public void inANivSuivantExp4(ANivSuivantExp4 node)
    {
        defaultIn(node);
    }

    public void outANivSuivantExp4(ANivSuivantExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivSuivantExp4(ANivSuivantExp4 node)
    {
        inANivSuivantExp4(node);
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outANivSuivantExp4(node);
    }

    public void inANonExp5(ANonExp5 node)
    {
        defaultIn(node);
    }

    public void outANonExp5(ANonExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonExp5(ANonExp5 node)
    {
        inANonExp5(node);
        if(node.getNon() != null)
        {
            node.getNon().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outANonExp5(node);
    }

    public void inANivSuivantExp5(ANivSuivantExp5 node)
    {
        defaultIn(node);
    }

    public void outANivSuivantExp5(ANivSuivantExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANivSuivantExp5(ANivSuivantExp5 node)
    {
        inANivSuivantExp5(node);
        if(node.getExp6() != null)
        {
            node.getExp6().apply(this);
        }
        outANivSuivantExp5(node);
    }

    public void inAParenthesesExp6(AParenthesesExp6 node)
    {
        defaultIn(node);
    }

    public void outAParenthesesExp6(AParenthesesExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesesExp6(AParenthesesExp6 node)
    {
        inAParenthesesExp6(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAParenthesesExp6(node);
    }

    public void inAAppelExp6(AAppelExp6 node)
    {
        defaultIn(node);
    }

    public void outAAppelExp6(AAppelExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppelExp6(AAppelExp6 node)
    {
        inAAppelExp6(node);
        if(node.getApp() != null)
        {
            node.getApp().apply(this);
        }
        outAAppelExp6(node);
    }

    public void inAVarExp6(AVarExp6 node)
    {
        defaultIn(node);
    }

    public void outAVarExp6(AVarExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp6(AVarExp6 node)
    {
        inAVarExp6(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExp6(node);
    }

    public void inANombreExp6(ANombreExp6 node)
    {
        defaultIn(node);
    }

    public void outANombreExp6(ANombreExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANombreExp6(ANombreExp6 node)
    {
        inANombreExp6(node);
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        outANombreExp6(node);
    }
}
